// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/game/game.go
//
// Generated by this command:
//
//	mockgen -source internal/service/game/game.go -destination=internal/service/game/mocks/game.go -package=mock_gameservice
//

// Package mock_gameservice is a generated GoMock package.
package mock_gameservice

import (
	context "context"
	io "io"
	reflect "reflect"

	v7 "github.com/minio/minio-go/v7"
	model "github.com/sariya23/game_service/internal/model"
	dto "github.com/sariya23/game_service/internal/model/dto"
	gamev2 "github.com/sariya23/proto_api_games/v5/gen/gamev2"
	gomock "go.uber.org/mock/gomock"
)

// MockGameReposetory is a mock of GameReposetory interface.
type MockGameReposetory struct {
	ctrl     *gomock.Controller
	recorder *MockGameReposetoryMockRecorder
	isgomock struct{}
}

// MockGameReposetoryMockRecorder is the mock recorder for MockGameReposetory.
type MockGameReposetoryMockRecorder struct {
	mock *MockGameReposetory
}

// NewMockGameReposetory creates a new mock instance.
func NewMockGameReposetory(ctrl *gomock.Controller) *MockGameReposetory {
	mock := &MockGameReposetory{ctrl: ctrl}
	mock.recorder = &MockGameReposetoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameReposetory) EXPECT() *MockGameReposetoryMockRecorder {
	return m.recorder
}

// DaleteGame mocks base method.
func (m *MockGameReposetory) DaleteGame(ctx context.Context, gameID int64) (*dto.DeletedGame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DaleteGame", ctx, gameID)
	ret0, _ := ret[0].(*dto.DeletedGame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DaleteGame indicates an expected call of DaleteGame.
func (mr *MockGameReposetoryMockRecorder) DaleteGame(ctx, gameID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DaleteGame", reflect.TypeOf((*MockGameReposetory)(nil).DaleteGame), ctx, gameID)
}

// GetGameByID mocks base method.
func (m *MockGameReposetory) GetGameByID(ctx context.Context, gameID int64) (*model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameByID", ctx, gameID)
	ret0, _ := ret[0].(*model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameByID indicates an expected call of GetGameByID.
func (mr *MockGameReposetoryMockRecorder) GetGameByID(ctx, gameID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameByID", reflect.TypeOf((*MockGameReposetory)(nil).GetGameByID), ctx, gameID)
}

// GetGameByTitleAndReleaseYear mocks base method.
func (m *MockGameReposetory) GetGameByTitleAndReleaseYear(ctx context.Context, title string, releaseYear int32) (*model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameByTitleAndReleaseYear", ctx, title, releaseYear)
	ret0, _ := ret[0].(*model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameByTitleAndReleaseYear indicates an expected call of GetGameByTitleAndReleaseYear.
func (mr *MockGameReposetoryMockRecorder) GetGameByTitleAndReleaseYear(ctx, title, releaseYear any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameByTitleAndReleaseYear", reflect.TypeOf((*MockGameReposetory)(nil).GetGameByTitleAndReleaseYear), ctx, title, releaseYear)
}

// GetTopGames mocks base method.
func (m *MockGameReposetory) GetTopGames(ctx context.Context, filters dto.GameFilters, limit uint32) ([]model.ShortGame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopGames", ctx, filters, limit)
	ret0, _ := ret[0].([]model.ShortGame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopGames indicates an expected call of GetTopGames.
func (mr *MockGameReposetoryMockRecorder) GetTopGames(ctx, filters, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopGames", reflect.TypeOf((*MockGameReposetory)(nil).GetTopGames), ctx, filters, limit)
}

// SaveGame mocks base method.
func (m *MockGameReposetory) SaveGame(ctx context.Context, game model.Game) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGame", ctx, game)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveGame indicates an expected call of SaveGame.
func (mr *MockGameReposetoryMockRecorder) SaveGame(ctx, game any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGame", reflect.TypeOf((*MockGameReposetory)(nil).SaveGame), ctx, game)
}

// UpdateGameStatus mocks base method.
func (m *MockGameReposetory) UpdateGameStatus(ctx context.Context, gameID int64, newStatus gamev2.GameStatusType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameStatus", ctx, gameID, newStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGameStatus indicates an expected call of UpdateGameStatus.
func (mr *MockGameReposetoryMockRecorder) UpdateGameStatus(ctx, gameID, newStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameStatus", reflect.TypeOf((*MockGameReposetory)(nil).UpdateGameStatus), ctx, gameID, newStatus)
}

// MockTagRepository is a mock of TagRepository interface.
type MockTagRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTagRepositoryMockRecorder
	isgomock struct{}
}

// MockTagRepositoryMockRecorder is the mock recorder for MockTagRepository.
type MockTagRepositoryMockRecorder struct {
	mock *MockTagRepository
}

// NewMockTagRepository creates a new mock instance.
func NewMockTagRepository(ctrl *gomock.Controller) *MockTagRepository {
	mock := &MockTagRepository{ctrl: ctrl}
	mock.recorder = &MockTagRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagRepository) EXPECT() *MockTagRepositoryMockRecorder {
	return m.recorder
}

// GetTagByNames mocks base method.
func (m *MockTagRepository) GetTagByNames(ctx context.Context, tags []string) ([]model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByNames", ctx, tags)
	ret0, _ := ret[0].([]model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByNames indicates an expected call of GetTagByNames.
func (mr *MockTagRepositoryMockRecorder) GetTagByNames(ctx, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByNames", reflect.TypeOf((*MockTagRepository)(nil).GetTagByNames), ctx, tags)
}

// MockGenreRepository is a mock of GenreRepository interface.
type MockGenreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGenreRepositoryMockRecorder
	isgomock struct{}
}

// MockGenreRepositoryMockRecorder is the mock recorder for MockGenreRepository.
type MockGenreRepositoryMockRecorder struct {
	mock *MockGenreRepository
}

// NewMockGenreRepository creates a new mock instance.
func NewMockGenreRepository(ctrl *gomock.Controller) *MockGenreRepository {
	mock := &MockGenreRepository{ctrl: ctrl}
	mock.recorder = &MockGenreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenreRepository) EXPECT() *MockGenreRepositoryMockRecorder {
	return m.recorder
}

// GetGenreByNames mocks base method.
func (m *MockGenreRepository) GetGenreByNames(ctx context.Context, genres []string) ([]model.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenreByNames", ctx, genres)
	ret0, _ := ret[0].([]model.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenreByNames indicates an expected call of GetGenreByNames.
func (mr *MockGenreRepositoryMockRecorder) GetGenreByNames(ctx, genres any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenreByNames", reflect.TypeOf((*MockGenreRepository)(nil).GetGenreByNames), ctx, genres)
}

// MockS3Storager is a mock of S3Storager interface.
type MockS3Storager struct {
	ctrl     *gomock.Controller
	recorder *MockS3StoragerMockRecorder
	isgomock struct{}
}

// MockS3StoragerMockRecorder is the mock recorder for MockS3Storager.
type MockS3StoragerMockRecorder struct {
	mock *MockS3Storager
}

// NewMockS3Storager creates a new mock instance.
func NewMockS3Storager(ctrl *gomock.Controller) *MockS3Storager {
	mock := &MockS3Storager{ctrl: ctrl}
	mock.recorder = &MockS3StoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Storager) EXPECT() *MockS3StoragerMockRecorder {
	return m.recorder
}

// DeleteObject mocks base method.
func (m *MockS3Storager) DeleteObject(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockS3StoragerMockRecorder) DeleteObject(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockS3Storager)(nil).DeleteObject), ctx, name)
}

// GetObject mocks base method.
func (m *MockS3Storager) GetObject(ctx context.Context, name string) (*v7.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, name)
	ret0, _ := ret[0].(*v7.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockS3StoragerMockRecorder) GetObject(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockS3Storager)(nil).GetObject), ctx, name)
}

// SaveObject mocks base method.
func (m *MockS3Storager) SaveObject(ctx context.Context, name string, data io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveObject", ctx, name, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveObject indicates an expected call of SaveObject.
func (mr *MockS3StoragerMockRecorder) SaveObject(ctx, name, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveObject", reflect.TypeOf((*MockS3Storager)(nil).SaveObject), ctx, name, data)
}
